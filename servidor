#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re
import queue


buffer = queue.Queue(maxsize=1)


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)

    vazio: bool = False

    # Carrega informações remanescentes do buffer
    if(buffer.empty()):
        mensagem = b''
    else:
        mensagem = buffer.get_nowait()
    

    print(mensagem + b' Loaded from buffer')

    # Executa até que todas mensagens completas disponíves tenham sido lidas
    while(vazio != True):

        # Trata os dados recebidos, salvando qualquer mensagem incompleta no buffer
        contagem = dados.count(b'\n')
        print("CONTAGEM:%i"  %contagem)

        if contagem == 0:
            mensagem += dados
            buffer.put_nowait(mensagem)
            vazio = True
        else:
            if contagem == 1 and dados.endswith(b'\n'):
                mensagem += dados
                vazio = True
                contagem -= 1
            else:
                dadosDivididos = dados.split(b'\n', 1)
                print(dadosDivididos)
                mensagem += dadosDivididos[0] + b'\n'
                dados = dadosDivididos[1]
                contagem -= 1

        print('\n\n\n%s\n\n\n' %mensagem)

        # Com os dados recebidos podemos começar a trabalhar eles
        if mensagem.endswith(b'\n'):
            if mensagem.startswith(b'PING'):
                conexao.enviar(b':server PONG server :' + mensagem.split(b' ',1)[1])
                mensagem = b''
            
            elif mensagem.startswith(b'NICK'):
                print(mensagem)
                nick = mensagem
                nick = nick.split(b' ', 1)[1]
                nick = nick.split(b'\r',1)[0]
                print(nick)

                if validar_nome(nick):
                    conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
                    conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')
                    mensagem = b''
                else:
                    conexao.enviar(b':server 432 * ' + nick + b' :Erroneous nickname\r\n')


    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

