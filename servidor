#!/usr/bin/env python3
# commit vazio
import asyncio
from logging import exception
from grader.tcp import Servidor
import re
import queue


buffer = queue.Queue(maxsize=1)
usuarios = []
nick_dict = []
nickLower_dict = []
canais = dict()
conexDict = dict()

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def enviaMsg(conexao):
    user = identifica_usuario(conexao)
    listaConex = list()

    if(user != False):
        user = user.lower()
        for canal in canais:
            if user in canais[canal]:
                for apelido in canais[canal]:
                    if(apelido != user):
                        conexaoNova = identifica_conexao(apelido)
                        if conexaoNova not in listaConex:
                            listaConex.append(conexaoNova)

    
    for item in listaConex:
        '''
        print(listaConex)
        print(b'->->'+user)
        print(b':' + user + b' QUIT :Connection closed\r\n')
        '''
        try:
            item.enviar(b':' + user + b' QUIT :Connection closed\r\n')
        except:
            print('conexao ja fechada?!')

    if(user != False):
        nickLower_dict.remove(user.lower())

def dados_recebidos(conexao, dados):
    print(conexao, dados)
    if dados == b'':
        vazio = True
        enviaMsg(conexao)
        return sair(conexao)
    else:
        vazio = False

    # Carrega informações remanescentes do buffer
    if(buffer.empty()):
        mensagem = b''
    else:
        mensagem = buffer.get_nowait()
    

    #print(mensagem + b' Loaded from buffer')

    # Executa até que todas mensagens completas disponíves tenham sido lidas
    while(vazio != True):

        # Trata os dados recebidos, salvando qualquer mensagem incompleta no buffer
        contagem = dados.count(b'\n')

        if contagem == 0:
            mensagem += dados
            buffer.put_nowait(mensagem)
            vazio = True
        else:
            if contagem == 1 and dados.endswith(b'\n'):
                mensagem += dados
                vazio = True
                contagem -= 1
            else:
                dadosDivididos = dados.split(b'\n', 1)
                #print(dadosDivididos)
                mensagem += dadosDivididos[0] + b'\n'
                dados = dadosDivididos[1]
                contagem -= 1

        # Com os dados recebidos podemos começar a trabalhar eles
        if mensagem.endswith(b'\n'):
            if mensagem.startswith(b'PING'):
                conexao.enviar(b':server PONG server :' + mensagem.split(b' ',1)[1])
                mensagem = b''
            
            elif mensagem.startswith(b'NICK'):
                nick = mensagem
                nick = nick.split(b' ', 1)[1]
                nick = nick.split(b'\r',1)[0]

                if validar_nome(nick):
                    if identifica_usuario(conexao): # Conexao (usuario) ja esta cadastrada

                        nick_atual = identifica_usuario(conexao)

                        if not nick.lower() in nickLower_dict:

                            conexao.enviar(b':'+ nick_atual +b' NICK '+ nick +b'\r\n')

                            conexDict[nick] = conexDict[nick_atual]

                            nick_dict[nick_dict.index(nick_atual)] = nick
                            nickLower_dict[nickLower_dict.index(nick_atual)] = nick
                            mensagem = b''

                            del conexDict[nick_atual]
                        else:
                            conexao.enviar(b':server 433 ' + nick_atual + b' ' + nick + b' :Nickname is already in use\r\n')

                    else: # Conexao (usuario) quer se cadastrar

                        if not nick.lower() in nickLower_dict:
                            conexao.enviar(b':server 001 ' + nick + b' :Welcome\r\n')
                            conexao.enviar(b':server 422 ' + nick + b' :MOTD File is missing\r\n')

                            usuarios.append(conexao)
                            nick_dict.append(nick)
                            nickLower_dict.append(nick.lower())
                            conexDict[nick.lower()] = conexao
                            mensagem = b''
                        else:
                            conexao.enviar(b':server 433 * ' + nick + b' :Nickname is already in use\r\n')

                else:
                    conexao.enviar(b':server 432 * ' + nick + b' :Erroneous nickname\r\n')

            elif mensagem.startswith(b'PRIVMSG'):
                msg_priv = mensagem.split(b' ')
                destinatario = msg_priv[1]
                msg = msg_priv[2][1:]
                remetente = identifica_usuario(conexao)
                
                #ignorando maiusculas e minusculas
                destinatario = destinatario.lower()
                remetente = remetente.lower()

                #verificando se a msg e destinada a um usuario ou a um canal
                if(destinatario.startswith(b'#')):
                    if(destinatario in canais):
                        for apelido in canais[destinatario]:
                            #envia para os membros do canal, exceto o remetente
                            if (apelido != remetente):
                                conexaoApelido = identifica_conexao(apelido)
                                conexaoApelido.enviar(b':' + remetente + b' PRIVMSG ' + destinatario + b' :' + msg)
                        mensagem = b''

                else:
                    if(destinatario in nickLower_dict) and (remetente in nickLower_dict):
                        conexaoDestinario = identifica_conexao(destinatario)
                        conexaoDestinario.enviar(b':' + remetente + b' PRIVMSG ' + destinatario + b' :' + msg)
                        mensagem = b''
                    else:
                        mensagem = b''


            elif mensagem.startswith(b'JOIN'):
                nome_canal = mensagem.split(b' ')[1]
                nome_canal = nome_canal.split(b'\r',1)[0]

                user = identifica_usuario(conexao)
                user = user.lower()

                if validar_nome(nome_canal[1:]):
                    if nome_canal not in canais:
                        canais[nome_canal] = []

                    canais[nome_canal].append(user)

                    for apelido in canais[nome_canal]:
                        conexaoApelido = identifica_conexao(apelido)
                        conexaoApelido.enviar(b':' + apelido + b' JOIN :' + nome_canal + b'\r\n')
                    
                else:
                    conexao.enviar(b'server 403 ' + nome_canal + b':No such channel\r\n')
                
                mensagem = b''

            elif mensagem.startswith(b'PART'):
                nome_canal = mensagem.split(b' ')[1]
                nome_canal = nome_canal.split(b'\r',1)[0]

                user = identifica_usuario(conexao)
                user = user.lower()

                print(user)
                print(nome_canal)
                for apelido in canais[nome_canal]:
                        conexaoApelido = identifica_conexao(apelido)
                        conexaoApelido.enviar(b':' + user + b' PART ' + nome_canal + b'\r\n')

                canais[nome_canal].remove(user)
                mensagem = b''

def identifica_usuario(conexao):
    if conexao in usuarios:
        keyList = list(conexDict.keys())
        valueList = list(conexDict.values())
        #return nick_dict[usuarios.index(conexao)]
        return keyList[valueList.index(conexao)]
    else:
        return False


def identifica_conexao(usuario):
    if usuario in conexDict:
        return conexDict[usuario]
    else:
        return False


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
