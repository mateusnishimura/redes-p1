#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re
import base64

mensagem = b''
aux = b''

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)

    global mensagem
    global aux3

    contagem = dados.count(b'\n')
    print("CONTAGEM:%i"  %contagem)
    mensagem += dados
    print("RECEBENDO" + str(mensagem))

    aux = mensagem.decode()
    resto = aux[5:]
    if mensagem.endswith(b'\n') and aux[0:4] == "PING" and contagem == 1:
        resto = resto.encode()
        conexao.enviar(b':server PONG server :' + resto)
        mensagem = b''

    # tem mais de uma mensagem
    if contagem == 0:
        aux3 = mensagem.replace(b"\n", b"")
        aux3 += b'\n'
        print(b"DADOS " + dados)

    if dados == b'\n':
        print(b':server PONG server :' + aux3 + b'\n')
        conexao.enviar(b':server PONG server :' + aux3 + b'\n')
        mensagem = b''

    if contagem > 1:
        aux2 = mensagem.decode()
        aux2 = aux.split("\n")
        for x in range(len(aux2)):
            print("AUX2:" + aux2[x])
            payload = aux2[x]
            payload = payload[5:]
            payload += '\n'
            payload = payload.encode()
            print(payload)
            if payload.endswith(b'\r\n') and payload != b'\n':
                #print(b':server PONG server :' + payload)
                conexao.enviar(b':server PONG server :' + payload)
                mensagem = b''
            elif not payload.endswith(b'\r\n'):
                mensagem += payload
                print(b"MENSAGEM: " + mensagem)

    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

